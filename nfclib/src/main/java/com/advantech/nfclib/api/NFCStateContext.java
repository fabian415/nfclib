/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : NFCState.sm
 */

package com.advantech.nfclib.api;


public class NFCStateContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public NFCStateContext(NFCState owner)
    {
        this (owner, Map1._0001);
    }

    public NFCStateContext(NFCState owner, NFCStateState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void Exception()
    {
        _transition = "Exception";
        getState().Exception(this);
        _transition = "";
        return;
    }

    public void Reset()
    {
        _transition = "Reset";
        getState().Reset(this);
        _transition = "";
        return;
    }

    public void RxMessage()
    {
        _transition = "RxMessage";
        getState().RxMessage(this);
        _transition = "";
        return;
    }

    public void TagFound()
    {
        _transition = "TagFound";
        getState().TagFound(this);
        _transition = "";
        return;
    }

    public void TxMessage()
    {
        _transition = "TxMessage";
        getState().TxMessage(this);
        _transition = "";
        return;
    }

    public void Wait()
    {
        _transition = "Wait";
        getState().Wait(this);
        _transition = "";
        return;
    }

    public NFCStateState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((NFCStateState) _state);
    }

    protected NFCState getOwner()
    {
        return (_owner);
    }

    public void setOwner(NFCState owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private NFCState _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class NFCStateState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected NFCStateState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(NFCStateContext context) {}
        protected void exit(NFCStateContext context) {}

        protected void Exception(NFCStateContext context)
        {
            Default(context);
        }

        protected void Reset(NFCStateContext context)
        {
            Default(context);
        }

        protected void RxMessage(NFCStateContext context)
        {
            Default(context);
        }

        protected void TagFound(NFCStateContext context)
        {
            Default(context);
        }

        protected void TxMessage(NFCStateContext context)
        {
            Default(context);
        }

        protected void Wait(NFCStateContext context)
        {
            Default(context);
        }

        protected void Default(NFCStateContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class Map1
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final Map1__0001 _0001 =
            new Map1__0001("Map1._0001", 0);
        public static final Map1__0100 _0100 =
            new Map1__0100("Map1._0100", 1);
        public static final Map1__0500 _0500 =
            new Map1__0500("Map1._0500", 2);
        public static final Map1__1000 _1000 =
            new Map1__1000("Map1._1000", 3);
    }

    protected static class Map1_Default
        extends NFCStateState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected Map1_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1__0001
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1__0001(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(NFCStateContext context)
            {
                NFCState ctxt = context.getOwner();

            ctxt.S(1, "Init");
            ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_NONE);
            ctxt.ClearTag();
            ctxt.setCommEnable(false);
            return;
        }

        @Override
        protected void Default(NFCStateContext context)
        {

            return;
        }

        @Override
        protected void Exception(NFCStateContext context)
        {

            return;
        }

        @Override
        protected void Reset(NFCStateContext context)
        {

            return;
        }

        @Override
        protected void RxMessage(NFCStateContext context)
        {

            return;
        }

        @Override
        protected void TagFound(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.T(100, "Found A new Tag");
                ctxt.CreateCommander();
            }
            finally
            {
                context.setState(Map1._0100);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void TxMessage(NFCStateContext context)
        {

            return;
        }

        @Override
        protected void Wait(NFCStateContext context)
        {

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1__0100
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1__0100(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(NFCStateContext context)
            {
                NFCState ctxt = context.getOwner();

            ctxt.S(100, "Setup");
            ctxt.SetWaitTimer(0, 10);
            ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_INIT);
            return;
        }

        @Override
        protected void Default(NFCStateContext context)
        {

            (context.getState()).exit(context);
            context.setState(Map1._0001);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Reset(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.T(1, "Reset");
            }
            finally
            {
                context.setState(Map1._0001);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Wait(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            if ( ctxt.getWaitIndex() == 0 )
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.SetupFTM();
                }
                finally
                {
                    context.setState(Map1._0500);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Wait(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1__0500
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1__0500(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(NFCStateContext context)
            {
                NFCState ctxt = context.getOwner();

            ctxt.S(500, "Test Communication");
            ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_TEST);
            ctxt.CheckMBCtrl();
            ctxt.SetWaitTimer(0, 1);
            ctxt.SetWaitTimer(1, 50);
            ctxt.SetWaitTimer(2, 500);
            return;
        }

        @Override
        protected void exit(NFCStateContext context)
            {
            NFCState ctxt = context.getOwner();

            ctxt.ClearAllWaitTimers();
            return;
        }

        @Override
        protected void Default(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.C("0500 Wrong Event");
            }
            finally
            {
                context.setState(Map1._0001);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Exception(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            NFCStateState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.E(1, "NFC Exception, reset");
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Reset(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.T(1, "Reset");
            }
            finally
            {
                context.setState(Map1._0001);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void RxMessage(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_BUSY);
                ctxt.HandleRxMessage();
                ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_READY);
            }
            finally
            {
                context.setState(Map1._1000);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void TxMessage(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            NFCStateState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_BUSY);
                ctxt.HandleTxMessage();
                ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_READY);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Wait(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            if ( ctxt.getWaitIndex() == 0 )
            {
                NFCStateState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.CheckMBCtrl();
                    ctxt.SetWaitTimer(0, 1);
                }
                finally
                {
                    context.setState(endState);
                }

            }
            else if ( ctxt.getWaitIndex() == 1 )
            {
                NFCStateState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.TestAPI();
                    ctxt.CheckEH();
                    ctxt.SetWaitTimer(1, 50);
                }
                finally
                {
                    context.setState(endState);
                }

            }
            else if ( ctxt.getWaitIndex() == 2 )
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.E(1, "NFCAPI didnt send test command");
                }
                finally
                {
                    context.setState(Map1._0001);
                    (context.getState()).entry(context);
                }

            }            else
            {
                super.Wait(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Map1__1000
        extends Map1_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Map1__1000(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(NFCStateContext context)
            {
                NFCState ctxt = context.getOwner();

            ctxt.S(1000, "Ready");
            ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_READY);
            ctxt.CheckMBCtrl();
            ctxt.SetWaitTimer(0, 1);
            ctxt.setCommEnable(true);
            return;
        }

        @Override
        protected void exit(NFCStateContext context)
            {
            NFCState ctxt = context.getOwner();

            ctxt.ClearAllWaitTimers();
            return;
        }

        @Override
        protected void Default(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            NFCStateState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.C("1000 Wrong Event");
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Exception(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.E(1, "NFC Exception, reset");
            }
            finally
            {
                context.setState(Map1._0001);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Reset(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.T(1, "Reset");
            }
            finally
            {
                context.setState(Map1._0001);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void RxMessage(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            NFCStateState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_BUSY);
                ctxt.HandleRxMessage();
                ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_READY);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void TagFound(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.T(100, "Re-Found Tag Again");
                ctxt.CreateCommander();
            }
            finally
            {
                context.setState(Map1._0100);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void TxMessage(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            NFCStateState endState = context.getState();
            context.clearState();
            try
            {
                ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_BUSY);
                ctxt.HandleTxMessage();
                ctxt.SetNFCState(NFCState.NFCSTATE.NFCSTATE_READY);
            }
            finally
            {
                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Wait(NFCStateContext context)
        {
            NFCState ctxt = context.getOwner();

            if ( ctxt.getWaitIndex() == 0 )
            {
                NFCStateState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.CheckMBCtrl();
                    ctxt.SetWaitTimer(0, 1);
                }
                finally
                {
                    context.setState(endState);
                }

            }
            else
            {
                super.Wait(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
